{"remainingRequest":"/Users/garrett_neff/Desktop/flask-vue/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/garrett_neff/Desktop/flask-vue/client/src/components/WorldMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/garrett_neff/Desktop/flask-vue/client/src/components/WorldMap.vue","mtime":1585696851456},{"path":"/Users/garrett_neff/Desktop/flask-vue/client/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/garrett_neff/Desktop/flask-vue/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/garrett_neff/Desktop/flask-vue/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBheGlvcyBmcm9tICdheGlvcycKZXhwb3J0IGRlZmF1bHQgewoJbmFtZTogIndvcmxkTWFwIiwKCWRhdGEgKCkgewoJCXJldHVybiB7IAoJCQl6b29tOiAyLAoJCQltaW5ab29tOiAyLAoJCQljZW50ZXI6IFswLCAwXSwKCQkJcm90YXRpb246IDAsCgkJCWdlb2xvY1Bvc2l0aW9uOiB1bmRlZmluZWQsCgkJCW92ZXJsYXlDb29yZGluYXRlOiBbMzAsIDMwXSwKCQkJLy8gcGVvcGxlOiBbCgkJCS8vIAl7bmFtZTogIkRvbmFsZCBUcnVtcCIsIGNvb3JkaW5hdGVzOiBbLTc3LjA3LCAzOC44N10sIGltZ1VybDogImh0dHA6Ly9wYnMudHdpbWcuY29tL3Byb2ZpbGVfaW1hZ2VzLzg3NDI3NjE5NzM1NzU5NjY3Mi9rVXVodDAwbV9ub3JtYWwuanBnIn0sCgkJCS8vIAl7bmFtZTogIkpvZSBCaWRlbiIsIGNvb3JkaW5hdGVzOiBbLTc1LjU1LCAzOS43Ml0sIGltZ1VybDogImh0dHA6Ly9wYnMudHdpbWcuY29tL3Byb2ZpbGVfaW1hZ2VzLzEyMzUyNDQ3MDQ4NTk2NjQzODUvb25lUDZCckFfbm9ybWFsLmpwZyJ9LAoJCQkvLyBdCgkJCXBlb3BsZTogdW5kZWZpbmVkCgkJfQoJfSwKCW1vdW50ZWQgKCkgewoJCQljb25zdCBwYXRoID0gImh0dHA6Ly8xMjcuMC4wLjE6NTAwMC8iCgkJCWF4aW9zKHsKCQkJCW1ldGhvZDogIkdFVCIsCgkJCQl1cmw6IHBhdGgsCgkJCX0KCQkJKQoJCQkudGhlbihyZXNwb25zZSA9PiAodGhpcy5wZW9wbGUgPSByZXNwb25zZS5kYXRhKSkKCgoJCX0KfQogICAgIAo="},{"version":3,"sources":["WorldMap.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA","file":"WorldMap.vue","sourceRoot":"src/components","sourcesContent":["<template>\n\t<div>\n      <vl-map :load-tiles-while-animating=\"true\" :load-tiles-while-interacting=\"true\"\n              data-projection=\"EPSG:4326\" style=\"height: 400px\">\n        <vl-view :zoom.sync=\"zoom\" :center.sync=\"center\" :rotation.sync=\"rotation\" :min-zoom=\"minZoom\"></vl-view>\n\n        <vl-geoloc @update:position=\"geolocPosition = $event\">\n          <template slot-scope=\"geoloc\">\n            <vl-feature v-if=\"geoloc.position\" id=\"position-feature\">\n              <vl-geom-point :coordinates=\"geoloc.position\"></vl-geom-point>\n              <vl-style-box>\n                <vl-style-icon src=\"_media/marker.png\" :scale=\"0.4\" :anchor=\"[0.5, 1]\"></vl-style-icon>\n              </vl-style-box>\n            </vl-feature>\n          </template>\n        </vl-geoloc>\n\n\n        <vl-layer-tile id=\"osm\">\n          <vl-source-osm></vl-source-osm>\n        </vl-layer-tile>\n        <div\n          v-for=\"person in people\"\n          v-bind:key=\"person.name\"\n        >\n          <div class=\"expert\">\n            <vl-feature :properties=\"{prop: 'value', prop2: 'value'}\">\n              <vl-geom-point :coordinates = \"person.coordinates\"></vl-geom-point>\n            </vl-feature>\n            <vl-overlay :position = \"person.coordinates\" >\n              <template>\n                <div class=\"overlay-content\">\n                  <v-img class=\"thumbnail\" :src= \"person.imgUrl\"></v-img>\n                </div>\n              </template>\n            </vl-overlay>\n          </div>\n        </div>\n      </vl-map>\n    </div>\n</template>\n<script>\n\timport axios from 'axios'\n\texport default {\n\t\tname: \"worldMap\",\n\t\tdata () {\n\t\t\treturn { \n\t\t\t\tzoom: 2,\n\t\t\t\tminZoom: 2,\n\t\t\t\tcenter: [0, 0],\n\t\t\t\trotation: 0,\n\t\t\t\tgeolocPosition: undefined,\n\t\t\t\toverlayCoordinate: [30, 30],\n\t\t\t\t// people: [\n\t\t\t\t// \t{name: \"Donald Trump\", coordinates: [-77.07, 38.87], imgUrl: \"http://pbs.twimg.com/profile_images/874276197357596672/kUuht00m_normal.jpg\"},\n\t\t\t\t// \t{name: \"Joe Biden\", coordinates: [-75.55, 39.72], imgUrl: \"http://pbs.twimg.com/profile_images/1235244704859664385/oneP6BrA_normal.jpg\"},\n\t\t\t\t// ]\n\t\t\t\tpeople: undefined\n\t\t\t}\n\t\t},\n\t\tmounted () {\n\t\t\t\tconst path = \"http://127.0.0.1:5000/\"\n\t\t\t\taxios({\n\t\t\t\t\tmethod: \"GET\",\n\t\t\t\t\turl: path,\n\t\t\t\t}\n\t\t\t\t)\n\t\t\t\t.then(response => (this.people = response.data))\n\n\n\t\t\t}\n\t}\n      \n</script>\n<style scoped>\n\t.thumbnail {\n\t\t\tmax-height: 20px;\n\t\t\tmax-width: 20px;\n\t\t\tborder-radius: 50%;\n\t\t}\n\n</style>"]}]}